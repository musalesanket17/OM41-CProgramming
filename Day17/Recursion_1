

1.


			v1 = 2 v2 = 2 

			void call_rec(int v1,int v2)
			{		
				      2     2 	
				  if(v1 && v2)  1  2 --> 1(post) 
				    call_rec(--v1,v2--);
						     1  1 
				printf("%2d %2d \t",v1,v2); // 1 1 
			}


			                   1      2 
			void call_rec(int v1,int v2)
			{		
				      1     2 	
				  if(v1 && v2)  0  2 --> 1 (post)
				    call_rec(--v1,v2--);
						     0  1 
				printf("%2d %2d \t",v1,v2); // 0 1 
			}

		
			                   0      2 
			void call_rec(int v1,int v2)
			{		
				      0     2 	   // false 
				  if(v1 && v2)  
				    call_rec(--v1,v2--);
						     0  2 
				printf("%2d %2d \t",v1,v2); // 0 2 
			}



**********************************************************************************************************
#include<stdio.h>
int doSomething(int a, int b)
{
	if (b==1)
		return a;
	else
		return a + doSomething(a,b-1);
}

int main()
{
	int a = doSomething(2,3);
	printf("%d",a);
}


-------------------------------------

		    2      3 	
int doSomething(int a, int b)
{
	if (b==1)
		return a;
	else
		return a + doSomething(a,b-1); // 2 +doSomething(2,2) // 4 + 2 // 6  
}


		    2      2	
int doSomething(int a, int b)
{
	if (b==1)
		return a;
	else
		return a + doSomething(a,b-1); // 2 +doSomething(2,1)  // 2 + 2 --> 4
}

		    2      1	
int doSomething(int a, int b)
{
	if (b==1)
		return a; // return 2 
	else
		return a + doSomething(a,b-1); // 2 +doSomething(2,1) 
}
********************************************************************************************************





2.
#include<stdio.h>
int fun(int a)
{
  if(a == 0)
         return a+1;

return 2*a+fun(a-1);
}

int main()
{
     printf("%d\n", fun(5));
     return 0;
}



// 31 will be returned 
	    5	     
int fun(int a)
{
  if(a == 0)
         return a+1;

return 2*a+fun(a-1); // 2 * 5 + fun(4) // 10 + fun(4) // 10 + 21
}


	    4	     
int fun(int a)
{
  if(a == 0)
         return a+1;

return 2*a+fun(a-1); // 2 * 4 + fun(3) // 8 + fun(3) // 8 + 13
}

	    3	     
int fun(int a)
{
  if(a == 0)
         return a+1;

return 2*a+fun(a-1); // 2 * 3 + fun(2) // 6 + fun(2) // 6 + 7 //13
}

	    2	     
int fun(int a)
{
  if(a == 0)
         return a+1;

return 2*a+fun(a-1); // 2 * 2 + fun(1) // 4 + fun(1)  // 4 +3 --> 7
}

	    1	     
int fun(int a)
{
  if(a == 0)
         return a+1;

return 2*a+fun(a-1); // 2 * 1 + fun(0) // 2 + 1 --> 3 
}


	    0	     
int fun(int a)
{
  if(a == 0)
         return a+1; // return 1 (true condition) 

return 2*a+fun(a-1); // 2 * 1 + fun(0) // 
}

************************************************************************************************************************


3.
#include<stdio.h>

int fun(int n)
{
	static int i = 3;
		if (n >= 5)
			return n;
	n = n+i;
	i++;

	return fun(n);
}
int main(void)
{
int ret=fun(3);
printf("%d",ret);
return 0;
}
-------------------------------
/*	    3	
int fun(int n)
{
	static int i = 3;
		if (n >= 5)
			return n;
	n = n+i;// n = 3 + 3 //6
	i++;   //  i=3 i++ --> 4 

	return fun(n);// fun(6)
}
	    6 	
int fun(int n)
{
	static int i = 3;
		if (n >= 5)
			return n; // return 6 // will return to the previous activation record and will print 6
	n = n+i;// n = 3 + 3 
	i++;   //  i=3 i++ --> 4 

	return fun(n);
}




