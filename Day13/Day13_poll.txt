Q.1
int main() {
	register int a = 10;
	int *p = &a; // cannot use address of register -- compiler error
	printf("%d\n", *p);
	return 0;
}
A) 10
B) address of a
C) compiler error
D) None of these
Answer: C


Q.2
int main()
{
	register a=10; // data type missing warning -- considered as int.
	{
		register a = 15; // data type missing warning -- considered as int.
		printf("%d ", a); --> 15
	}
	printf("%d ", a); --> 10
	return 0;
}
A) 15 20
B) 15 10
C) 10 15
D) 15 15
Answer: B

Q.3
void my_recursive_function(int n)
{
    if(n == 8)
    	return;
    printf("%d ",n);
    my_recursive_function(n-1);
}
int main()
{
    my_recursive_function(10);
    return 0;
}

a) 10
b) 1
c) 10 9 8
d) 10 9 
Answer: D

Q.4
int calc(int x) {
	if(x <= 0)
		return 1;
	return calc(x-2) * calc(x-4) + x;
}
int main() {
	printf("%d\n", calc(3));	
	return 0;
}

A) 5
B) 1
C) 0
D) None of these
Answer: A

Q.5
int bin(int n) {
	return n == 0 ? 0 : bin(n/2) * 10 + n % 2;
}
int main() {
	printf("%d\n", bin(11));	
	return 0;
}
A) 1011
B) 1101
C) 11
D) None of these
Answer: A

=================================================================
void my_recursive_function(int n) //n=8
{
    if(n == 8) // true
    	return; // return from function (fn completed) -- no value/result returned (void)
    printf("%d ",n); // this line was not executed -- because returned from above stmt
    my_recursive_function(n-1);
}

void my_recursive_function(int n) // n=9
{
    if(n == 8) // false
    	return;
    printf("%d ",n); // 9
    my_recursive_function(n-1); 
}

void my_recursive_function(int n) // n=10
{
    if(n == 8) // false
    	return;
    printf("%d ",n); // 10
    my_recursive_function(n-1);
}
int main()
{
    my_recursive_function(10);
    return 0;
}

// OUTPUT: 10	9	

-----------------------------------------------------------------------------

int calc(int x) {
	if(x <= 0)
		return 1;
	return calc(x-2) * calc(x-4) + x;
}
int main() {
	printf("%d\n", calc(3));	
	return 0;
}

calc(-4) = 	1
calc(-3) = 	1
calc(-2) = 	1
calc(-1) = 	1
calc(0) = 	1
calc(1) = calc(x-2) * calc(x-4) + x = calc(-1) * calc(-3) + 1 = 1 * 1 + 1 = 2
calc(2) = calc(x-2) * calc(x-4) + x = calc(0) * calc(-2) + 2 = 1 * 1 + 2 = 3
calc(3) = calc(x-2) * calc(x-4) + x = calc(1) * calc(-1) + 3 = 2 * 1 + 3 = 5 

---------------------------------------------------------------------

/*
int bin(int n) {
	return n == 0 ? 0 : bin(n/2) * 10 + n % 2;
}
*/
int bin(int n) { // n = 0
	if(n == 0) // true
		return 0; 
	else
		return bin(n/2) * 10 + n % 2;
}

int bin(int n) { // n = 1
	if(n == 0) // false
		return 0;
	else
		return bin(n/2) * 10 + n % 2;
			// bin(1/2 --> 0) * 10 + 1 % 2;
			//	0 * 10 + 1 % 2 = 1
}

int bin(int n) { // n = 2
	if(n == 0) // false
		return 0;
	else
		return bin(n/2) * 10 + n % 2;
			// bin(2/2 --> 1) * 10 + 2 % 2;
			// 1 * 10 + 2 % 2 = 10
}

int bin(int n) { // n = 5
	if(n == 0) // false
		return 0;
	else
		return bin(n/2) * 10 + n % 2;
			// bin(5/2 --> 2) * 10 + 5 % 2;
			// 10 * 10 + 5 % 2 = 101
}

int bin(int n) { // n = 11
	if(n == 0) // false
		return 0;
	else
		return bin(n/2) * 10 + n % 2;
			// bin(11/2 --> 5) * 10 + 11 % 2;
			// 101 * 10 + 11 % 2 = 1011
}
int main() {
	printf("%d\n", bin(11));	
				// 1011
	return 0;
}
A) 1011
B) 1101
C) 11
D) None of these
Answer: A









